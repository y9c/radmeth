
ifndef GMOCK_DIR
# $(error Must define GMOCK_DIR variable)
GMOCK_DIR=/usr/include/gmock/
endif

ifndef SMITHLAB_CPP
SMITHLAB_CPP=../../../smithlab_cpp/
endif

# The directory gtest must be located inside GMOCK
#GTEST_DIR = ${GMOCK_DIR}/gtest
GMOCK_DIR=/usr/include/gmock/

# Directory with the code to be tested.
CODE_DIR = ..

VPATH = $(CODE_DIR)

# Flags passed to the preprocessor.
CPPFLAGS += -isystem $(GTEST_DIR)/include -isystem $(GMOCK_DIR)/include \
			$(addprefix -I,$(SMITHLAB_CPP) $(CODE_DIR))

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -std=c++11

ifeq "$(shell uname)" "Darwin"
CXXFLAGS += -arch x86_64
ifeq "$(shell if [ `sysctl -n kern.osrelease | cut -d . -f 1` -ge 13 ];\
              then echo 'true'; fi)" "true"
CXXFLAGS += -stdlib=libstdc++
endif
endif

LIBS += -lgsl -lgslcblas

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# All Google Mock headers. Note that all Google Test headers are
# included here too, as they are #included by Google Mock headers.
# Usually you shouldn't change this definition.	
GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
                $(GMOCK_DIR)/include/gmock/internal/*.h \
                $(GTEST_HEADERS)

TESTS = test_design test_table_row test_pipeline test_loglikratio_test \
		test_regression

# Tests generated by this makefile.
all: $(TESTS) 

clean:
	rm -f $(TESTS) gmock.a gmock_main.a *.o

# Builds gmock.a and gmock_main.a.  These libraries contain both
# Google Mock and Google Test.  A test should link with either gmock.a
# or gmock_main.a, depending on whether it defines its own main()
# function.  It's fine if your test only uses features from Google
# Test (and not Google Mock).

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)

# For simplicity and to avoid depending on implementation details of
# Google Mock and Google Test, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Mock and
# Google Test compile fast and for ordinary users their source rarely
# changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GTEST_DIR)/src/gtest-all.cc

gmock-all.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock-all.cc

gmock_main.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock_main.cc

gmock.a : gmock-all.o gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gmock_main.a : gmock-all.o gtest-all.o gmock_main.o
	$(AR) $(ARFLAGS) $@ $^

$(TESTS): $(addprefix $(SMITHLAB_CPP)/, GenomicRegion.o smithlab_os.o \
          smithlab_utils.o OptionParser.o MappedRead.o) \
          design.o table_row.o pipeline.o regression.o loglikratio_test.o \
          gsl_fitter.o gmock_main.a

%.o : %.cpp %.hpp
	$(CXX) $(CPPFLAGS) -c -o $@ $< $(CXXFLAGS)

% : %.cpp
	$(CXX) $(CPPFLAGS) -o $@ $^ $(LIBS) $(CXXFLAGS)
